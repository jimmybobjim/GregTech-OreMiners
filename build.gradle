plugins {
    id "dev.architectury.loom" version "$architectury_version"
    id "maven-publish"
}

base {
    archivesName = archives_base_name
}

version = mod_version
group = maven_group

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

def generatedResources = file("src/generated")

sourceSets {
    main {
        resources.srcDir generatedResources
    }
}

loom {
    silentMojangMappingsLicense()

    forge {
        mixinConfigs = [
                "gt_oreminers.mixins.json"
        ]

	    dataGen{
            mod(mod_id)
        }
    }

	runConfigs.named("data").configure {
        programArg("--existing=" + file("src/main/resources").absolutePath)
        programArgs("--client", "--server")
    }
}

repositories {
    mavenLocal()
    flatDir {
        dir 'libs'
    }
    mavenCentral()
    maven {
        name = 'GTCEu Maven'
        url = 'https://maven.gtceu.com'
        content {
            includeGroup 'com.gregtechceu.gtceu'
        }
    }
    maven {
        name 'FirstDarkDev'
        url "https://maven.firstdarkdev.xyz/snapshots/"
    }    
    maven {
        name 'Quilt'
        url 'https://maven.quiltmc.org/repository/release/'
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven { // Registrate
        url = "https://maven.tterrag.com/"
        content {
            // need to be specific here due to version overlaps
            includeGroup("com.jozufozu.flywheel")
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
    maven {
        // Patchouli, JEI
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // Curse Forge File
        url "https://cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // EMI
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    forge "net.minecraftforge:forge:$minecraft_version-$forge_version"
    // layered mappings - Mojmap names, parchment and QM docs and parameters
    mappings loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$quilt_mappings:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-$minecraft_version:$parchment_mappings@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    }

    modCompileOnly("mezz.jei:jei-$minecraft_version-forge-api:$jei_version") { transitive = false }
    modCompileOnly("mezz.jei:jei-$minecraft_version-common-api:$jei_version") { transitive = false }

    modImplementation("com.gregtechceu.gtceu:gtceu-$minecraft_version:$gtceu_version") { transitive = false }
    modImplementation("com.lowdragmc.ldlib:ldlib-forge-$minecraft_version:$ldlib_version") { transitive = false }
    modImplementation("com.simibubi.create:create-$minecraft_version:$create_version:slim") { transitive = false }
    modImplementation("com.jozufozu.flywheel:flywheel-forge-$minecraft_version:$flywheel_version")
    modImplementation("com.tterrag.registrate:Registrate:$registrate_version")
    modImplementation("dev.latvian.mods:kubejs-forge:$kubejs_version")

    modRuntimeOnly("dev.toma.configuration:configuration-forge-$minecraft_version:$configuration_version")
    modRuntimeOnly("mezz.jei:jei-$minecraft_version-forge:$jei_version") { transitive = false }
    
    modRuntimeOnly ("dev.emi:emi-forge:$emi_version+$minecraft_version")

    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:$mixinextras_version"))
    implementation(include("io.github.llamalad7:mixinextras-forge:$mixinextras_version"))

    // lombok
    compileOnly "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"
}

processResources {
    // set up properties for filling into metadata
    var properties = [
            "mod_license": mod_license,
            "mod_id": mod_id,
            "version": version,
            "mod_name": mod_name,
            "mod_url": mod_url,
            "mod_author": mod_author,
            "forge_version": forge_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version": minecraft_version,
            "gtceu_version": gtceu_version,
    ]
    inputs.properties(properties)

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    options.release.set(17)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
